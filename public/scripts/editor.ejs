<script>
    // adds a line of sheet when called through the "add tab block button"
    function addSheet() {
      // sheet.ejs holds a notation template for the user to write over
      const sheet = `<%-include('../public/sheet.ejs')%>`
      const lastBracket = notepad.value.lastIndexOf(']')
      insertionPoint = lastBracket + 4
      console.log(lastBracket + 3)
      // set the notation equal to its beginning up until the insertion point plus the sheet
      notepad.value = notepad.value.slice(0, insertionPoint)  + sheet
    }

    // listening for any key presses in the form field
    notepad.addEventListener('keydown', (event) => {
        if (event.key !== '=' && 
        event.key !== 'Backspace' && 
        event.key !== 'Tab' && 
        event.key !== 'CapsLock' && 
        event.key !== 'Shift' && 
        event.key !== 'Meta' && 
        event.key !== 'Enter' && 
        event.key !== 'Control' && 
        event.key !== 'Alt' && 
        event.key !== 'ArrowLeft' && 
        event.key !== 'ArrowRight' && 
        event.key !== 'ArrowUp' && 
        event.key !== 'ArrowDown') {
            // assigning a variable to the text within the form field
            const currentTab = notepad.value
            // getting the position of the cursor. if it is after the 3rd character in the entirety of the form, cursorPos would be equal to 3
            const cursorPos = notepad.selectionStart
            // find the last bracket
            const lastBracket = currentTab.lastIndexOf(']');
            // find the next bracket from the cursor
            const nextBracket = currentTab.indexOf(']', cursorPos)
            console.log(cursorPos)
            console.log(lastBracket)
            console.log(`current plus 4 ${currentTab[cursorPos + 4]}`)
            console.log(`current plus 5 ${currentTab[cursorPos + 5]}`)
            console.log(`current plus 6 ${currentTab[cursorPos + 6]}`)
            // check that the cursor is at a bracket but not the final one
            if (cursorPos === nextBracket &&cursorPos !== nextBracket) {
                event.preventDefault()
                return
            }
            // prevent the user from expanding the template
            // if the cursor is at a bracket but there are more ahead, skip to the next string
            if (cursorPos === nextBracket && currentTab[cursorPos + 5] !== ']' && cursorPos != lastBracket) {
                console.log('cursor hopped a string')
                notepad.setSelectionRange(cursorPos + 5, cursorPos + 5)
                event.preventDefault()
                return
            } else {
                if (cursorPos === nextBracket && currentTab[cursorPos + 5] === ']') {
                    console.log('cursor hopped onto the next block')
                    notepad.setSelectionRange(cursorPos + 6, cursorPos + 6)
                    event.preventDefault()
                    return
                } else
                if (cursorPos === lastBracket) {
                    console.log('cursor hopped off the last block')
                    notepad.setSelectionRange(cursorPos + 2, cursorPos + 2)
                    event.preventDefault()
                    return
                }
            }
            // replace the character at the cursor position with the new key pressed
            notepad.value = currentTab.slice(0, cursorPos) + event.key + currentTab.slice(cursorPos + 1)
            // setting the new cursor position. without this, every key press would send the cursor to the end of the form
            notepad.setSelectionRange(cursorPos + 1, cursorPos + 1)
            event.preventDefault()
        }
    })
    // adding a listener that replaces notation lines deleted by the user
    notepad.addEventListener('keydown', (event) => {
        const currentTab = notepad.value
        const cursorPos = notepad.selectionStart
        const notepadBefore = notepad.value.length
        let replaceThis = currentTab[cursorPos - 2]
        console.log(replaceThis)
        if (event.key == 'Backspace' || event.key == 'Delete') {
            if (currentTab[cursorPos - 1] === '=') {
                console.log('= deleted but replaced')
                notepad.value = notepad.value.slice(0, cursorPos - 1)  + '=' + notepad.value.slice(cursorPos)
                notepad.setSelectionRange(cursorPos - 1, cursorPos - 1)
                replaceThis = currentTab[cursorPos - 2]
                console.log(replaceThis)
                event.preventDefault()
            } else
            if (currentTab[cursorPos - 1] === ']') {
                console.log('] deleted but replaced')
                notepad.value = notepad.value.slice(0, cursorPos - 1)  + ']' + notepad.value.slice(cursorPos)
                notepad.setSelectionRange(cursorPos - 1, cursorPos - 1)
                replaceThis = currentTab[cursorPos - 2]
                event.preventDefault()
            }
            setTimeout(() => {
                console.log(`notepad length before deletion: ${notepadBefore}`)
                console.log(`notepad length after deletion: ${notepad.value.length}`)}, 10)
        }
        if (notepadBefore < notepad.value.length) {
            console.log(replaceThis)
            notepad.value = notepad.value.slice(0, cursorPos - 1)  + replaceThis + notepad.value.slice(cursorPos)
        }
    })
    function clearSheet() {
        notepad.value = ''
    };
  </script>