<script>
  // adding a listener for keystrokes on the form field. "keypress" works only for printable characters
  notepad.addEventListener("keypress", function (event) {
    // update the position of the user's cursor with every keystroke
    let cursorPos = notepad.selectionStart;
    console.log(`cursor index: ${cursorPos}`);
    // get the value of the character to the right of the cursor
    let nextChar = notepad.value[cursorPos];
    console.log(`right character: ${nextChar}`);
    // get the value of the character to the left of the cursor
    let prevChar = notepad.value[cursorPos - 1];
    console.log(`left character: ${prevChar}`);
    // get the position of the leftmost opening bracket "[" from the cursor
    let leftmostOpening = 1;
    // start at the index of the cursor, then count backwards
    for (let i = cursorPos; i >= 0; i--) {
      // if a bracket is found, stop and set that equal to leftmostOpening
      if (notepad.value[i] === "[") {
        leftmostOpening = i;
        break;
      }
    }
    console.log(`index of leftmost opening bracket: ${leftmostOpening}`);
    // get the position of the next closing bracket "]" from the cursor
    let nextClosing = notepad.value.indexOf("]", cursorPos);
    console.log(`index of next closing bracket: ${nextClosing}`);
    // get the position of the next opening bracket "[" from the cursor
    let nextOpening = notepad.value.indexOf("[", cursorPos);
    console.log(`index of next opening bracket: ${nextOpening}`);
    // get the last closing bracket
    let lastClosing = notepad.value.lastIndexOf("]");
    // get the position of the last closing bracket
    let leftmostClosing = 1;
    // start at the index of the cursor, then count backwards
    for (let i = cursorPos; i >= 0; i--) {
      // if a bracket is found, stop and set that equal to leftmostClosing
      if (notepad.value[i] === "]") {
        leftmostClosing = i;
        break;
      }
    }

    // set a boolean that is true if the cursor is within an opening and closing bracket
    let cursorWithin = true;
    if (leftmostOpening < nextClosing && leftmostClosing < leftmostOpening) {
      cursorWithin = true;
    } else {
      cursorWithin = false;
    }
    console.log(`cursor is on a line: ${cursorWithin}`);

    console.log(`last closer is at position ${leftmostClosing}
    next closer is at position ${nextClosing}
    distance between next and last closing brackets is ${
      nextClosing - leftmostClosing
    }
    `);
    if (cursorWithin === true) {
      // if the next character is not a closing bracket
      if (nextChar !== "]") {
        // instead of typing, set the form field equal to index 0 up to the cursor + the key pressed + the rest of the form field. this way, the template is overwritten instead of being pushed to the right
        console.log("hopping 1");
        notepad.value =
          notepad.value.slice(0, cursorPos) +
          event.key +
          notepad.value.slice(cursorPos + 1);
        // move the cursor to the right
        notepad.setSelectionRange(cursorPos + 1, cursorPos + 1);
        // prevent keys from being typed into the field
        event.preventDefault();
      }
    }

    // if the user has reached the end of a line the cursor hops to the next
    if (nextChar === "]") {
      notepad.setSelectionRange(cursorPos + 5, cursorPos + 5);

      event.preventDefault();
    }
  });

  // listening for keypresses that don't print with "keydown"
  notepad.addEventListener("keydown", function (event) {
    // define variables for each "keydown"
    let cursorPos = notepad.selectionStart;
    let nextChar = notepad.value[cursorPos];
    let prevChar = notepad.value[cursorPos - 1];
    let leftmostOpening = 1;
    for (let i = cursorPos; i >= 0; i--) {
      if (notepad.value[i] === "[") {
        leftmostOpening = i;
        break;
      }
    }
    let nextClosing = notepad.value.indexOf("]", cursorPos);
    let nextOpening = notepad.value.indexOf("[", cursorPos);
    let lastClosing = notepad.value.lastIndexOf("]");
    let leftmostClosing = 1;
    for (let i = cursorPos; i >= 0; i--) {
      if (notepad.value[i] === "]") {
        leftmostClosing = i;
        break;
      }
    }
    let cursorWithin = true;
    if (leftmostOpening < nextClosing && leftmostClosing < leftmostOpening) {
      cursorWithin = true;
    } else {
      cursorWithin = false;
    }
    // handle backspaces within the template
    if (event.key === "Backspace" || event.key === "Delete") {
      if (
        cursorWithin === true &&
        cursorPos !== leftmostOpening + 1 &&
        cursorPos !== nextClosing
      ) {
        // replace previous character with an "="
        notepad.value =
          notepad.value.slice(0, cursorPos - 1) +
          "=" +
          notepad.value.slice(cursorPos);
        // move the cursor back one position
        notepad.setSelectionRange(cursorPos - 1, cursorPos - 1);
        event.preventDefault();
      } else {
        if (cursorPos === leftmostOpening + 1) {
          // hop to the previous line
          notepad.setSelectionRange(cursorPos - 5, cursorPos - 5);
          event.preventDefault();
        } else {
          if (cursorWithin === false && cursorPos === nextClosing) {
            notepad.setSelectionRange(cursorPos - 1, cursorPos - 1);
            event.preventDefault();
          }
        }
      }
    }
    // let the user skip lines if they press enter or tab
    if (
      (cursorWithin === true && event.key === "Enter") ||
      event.key === "Tab"
    ) {
      // set a variable for the index of the next line
      let nextLine = notepad.value.indexOf("\n", cursorPos);
      // check if the next line is a new line
      if (nextLine === -1) {
        nextLine = notepad.value.length;
      }
      // hop down and set the cursor below its previous position
      notepad.setSelectionRange(
        nextLine + cursorPos - leftmostOpening + 3,
        nextLine + cursorPos - leftmostOpening + 3
      );
      event.preventDefault();
    }
  });

  // adds a line of sheet when called through the "add tab block button"
  function addSheet() {
    // sheet.ejs holds a notation template for the user to write over
    const sheet = `<%-include('../scripts/sheet.ejs')%>`;
    // set the notation equal to its beginning up until the insertion point plus the sheet
    notepad.value += "\n" + sheet;
  }
  // clears the form field
  function clearSheet() {
    notepad.value = "";
  }
</script>
